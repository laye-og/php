Moteur de recherche PHP-----------------------
Url     : http://codes-sources.commentcamarche.net/source/101280-moteur-de-recherche-phpAuteur  : CecilCordheleyDate    : 09/12/2015
Licence :
=========

Ce document intitulÈ ´ Moteur de recherche PHP ª issu de CommentCaMarche
(codes-sources.commentcamarche.net) est mis ‡ disposition sous les termes de
la licence Creative Commons. Vous pouvez copier, modifier des copies de cette
source, dans les conditions fixÈes par la licence, tant que cette note
apparaÓt clairement.

Description :
=============

Bonsoir √† tous,
<br />J'ai d√©cid√© de r√©aliser une base de connaissances en 
PHP pour une activit√©. Cependant j'avais besoins d'un outil qui maintienne un √
©quilibre entre la performance et l'ergonomie (retrouver une information et la r
etrouver vite).
<br />Pour ce faire j'ai cr√©√© un moteur de recherche qui cher
che √† √©muler celui de google 
<br />et trie les articles par pertinence. 
<b
r />Le moteur fonctionne gr√¢ce √† PDO
<br /><pre class="code" data-mode="php">
$db = new PDO("mysql:host=127.0.0.1;dbname=queryengine;charset=utf8","root","");
</pre>
<br />
<br /><b>L'instanciation</b> attend 1 param√®tre obligatoire mai
s vous devrez obligatoirement vous servir du second
<br /><pre class="code" dat
a-mode="php">$sqe=new Query_Engine($db,[
    "CONTENT"=&gt;"CONTENT_ARTICLE",
  
  "TITRE"=&gt;"TITRE_ARTICLE",
    "RESUME"=&gt;"RESUME_ARTICLE"
]);</pre>
<br 
/>Le premier c'est le PDO et le second assigne les champs sur lesquels le moteur
 devra faire les recherches.
<br />
<br />CONTENT =&gt; Correspond au contenu 
de l'article
<br />TITRE =&gt; Titre de l'article
<br />RESUME =&gt; R√©sum√© 
de l'article
<br />
<br /><b>Requ√™te SQL</b> / vous devez param√©trer la requ
√™te SQL permettant de r√©cup√©rer les articles
<br /><pre class="code" data-mo
de="php">$sqe-&gt;setQuery("SELECT * FROM article_tbl WHERE CONTENT_ARTICLE LIKE
 "%{:query:}%" OR TITRE_ARTICLE LIKE "%{:query:}%"");</pre>
<br /><b>{:query:}<
/b> sera substitu√© par le crit√®re de recherche appel√© par la fonction -&gt;qu
ery()
<br />Param√®trez les coeficients 
<br /><pre class="code" data-mode="ph
p">$sqe-&gt;setCoef("chapitre", 0.03);
$sqe-&gt;setCoef("tagcontent", 0.7);
$sqe
-&gt;setCoef("title", 6);
$sqe-&gt;setCoef("resume", 0.06);
$sqe-&gt;setCoef("ta
g", 0.01);</pre>
<br />
<br />&quot;chapitre&quot; correspond au nombre de cha
pitres dans l'article
<br />&quot;tagcontent&quot; correspond au nombre de fois
 o√π la recherche se trouve entre des balises
<br />&quot;title&quot; d√©termin
e quand la recherche correspond au titre
<br />&quot;resume&quot; correspond au
 nombre de fois o√π la recherche se trouve dans le resum√©
<br />&quot;tag&quot
; correspond au nombre de tags
<br />
<br />Ajoutez les crit√®res suppl√©menta
ires
<br /><pre class="code" data-mode="php">$query="assurance";
$sqe-&gt;Perti
nence_criteria("NB_CHAP", "/&lt;h2/is");
$sqe-&gt;Pertinence_criteria("TAG", "/&
lt;[^&gt;]+&gt;/is");
$sqe-&gt;Pertinence_criteria("COUNT_RELIEF", "/&lt;[^&gt;]
+&gt;($query)&lt;[^&gt;]+&gt;/is");</pre>
<br />
<br />pour finir ex√©cuter la
 requ√™te
<br />
<br /><pre class="code" data-mode="php">$result=$sqe-&gt;quer
y($query);</pre>
<br />
<br />Vous constaterez que quelque soit la requ√™te sa
isie, le premier article sera toujours le plus pertinent.
<br />
<br />Le ZIP 
contient l'exemple d√©crit plus haut ainsi que la base de donn√©es utilis√©e que
 vous pouvez importer.
<br />
